---
title: "ds assessment report"
format: live-html
webr:
  packages: 
    - tidyverse
    - scales
  cell-options:
    autorun: false
  resources:
    - https://raw.githubusercontent.com/ElijahMeyer3/ds_assessment_doc/main/data/clean_pilot.csv
---

```{r}
#| warning: false
#| message: false
#| echo: false
library(tidyverse)
library(janitor)
library(kableExtra)
library(gridExtra)
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(magrittr)
library(DT)
```

# Question assignments

| Team member           | TODOs |
|-----------------------|---------------------|
| Mine Çetinkaya-Rundel |                     |
| Elijah Meyer          |                     |
| Maria Tackett         |                     |
| Mine Dogucu           |                     |
| Matt Beckman          |                     |
| Andy Zieffler         |                     |
| Chelsey Legacy        |                     |

# Data analysis

Pilot data from the Spring 2025 academic calendar from Duke University 

# Data

```{r}
#| echo: false
#| message: false
#| warning: false

# data with question information
#assessment <- read_csv("data/anonymized-pilot-4-24.csv") |>
#assessment <- read_csv("data/anonymized-pilot-2025.csv") |>
assessment <- read_csv("data/ds_assessment_2025_April_14.csv") |>
  janitor::clean_names() |>
  mutate(
    duration_in_seconds = as.numeric(duration_in_seconds),
    finished = as.logical(finished),
    #he_said_she_said_1_3 = as.logical(he_said_she_said_1_3),
    #he_said_she_said_2_3 = as.logical(he_said_she_said_2_3),
    #he_said_she_said_3_3 = as.logical(he_said_she_said_3_3),
    ) |>
  filter(consent == "Yes, I agree to allow my responses to the assessment as research data.")

assessment <- assessment |>
  rename("movie_budgets_1b" = q47,
         "movie_budgets_1c" = q48, 
         "shop" = movie_budgets_2,
         "covid_map_1" = covid_map_1_2,
         "covid_map_2" = q49, 
         "covid_map_3" = q50,
         "covid_map_4" = q51,
         "att_check" = q53,
         "covid_map_5" = q52,
         "he_said_she_said_1" = he_said_she_said_1_3,
         "he_said_she_said_2" = q54,
         "he_said_she_said_3" = q55,
         "build_a_plot_1" = build_a_plot, 
         "build_a_plot_2" = q61,
         "blocks_1" = q56,
         "blocks_2" = q57, 
         "realty_tree_1" = realty_tree_1_2,
         "realty_tree_2" = q58, 
         ) 

assessment <- assessment[-1,] #remove test run by me

assessment <- assessment |> 
  select(-c(1:18, ncol(assessment)))

#mc <- assessment |> 
#  dplyr::select(storm_paths, contains("realty"), contains("movie_budget"), he_said_she_said_1_3, contains("screening"), contains("website"), # contains("build"), contains("confidentiali"))
```


There are `r nrow(assessment)` participants that opted into our study. All who opted in finished.

::: {.callout-caution collapse="true"}
## Missing observations

```{r}
#| echo: false
set.cutoff <- .8
set.cutoff.correct <- .5
```

Below are the percentages of missing observations by question. Questions that have at least `r set.cutoff` percent missing are highlighted in red.

```{r}
#| echo: false
percent_missing <- colSums(
  is.na(
    assessment |>
      select(1:ncol(assessment)) 
  )) / nrow(assessment)


pct_missing <- assessment |>
  select(1:ncol(assessment)) |>
   summarise_all(~ sum(is.na(.))) / nrow(assessment) 

p <- as.data.frame(pct_missing)

p <- p |>
  pivot_longer(
    cols = 1:ncol(p),
    names_to = "question",
    values_to = "pct_missing") |>
  arrange(desc(pct_missing))

color.me <- which(p$pct_missing>=set.cutoff) # set cut off to highlight table

p |>
  kbl(digits = 2) |>
  kable_styling() |>
  row_spec(color.me, bold = T, color = "white", background = "tomato")

```
:::

::: {.callout-caution collapse="true"}
## Percent correct - multiple choice

Below is a table that shares the percentage of correct responses across `r nrow(data)` students. 

Note: movie_wrangling_3_6 should be answer 0, but answer 0 was not presented on assessment.


    START_WITH(the Movies table) then

       KEEP_ROWS_WHERE(the season value is Fall) then

        COUNT(the number of rows) WHERE( best_picture value is Yes)

```{r}
#| echo: false
#| message: false
#| warning: false

#names(mc) <- mc[1,] |> unlist() |> unname() #put question as name

mc2 <- assessment |>
  mutate(id = 1:n()) |>
  pivot_longer(1:ncol(assessment), names_to = "question", values_to = "answer") 

question <- unique(mc2$question)[1:28]

key <- tibble(
  question = question,
  correct = c( "City a", "Plot C", "Plot A", "Plot C", "Shop 1", "The headline makes a causal claim, but only a relationship can be concluded from this analysis.", "South", "CA", "FALSE", "FALSE", "Option 2", "No, we can not conclude a difference in total number of COVID cases. There is not enough information given on this graph to make the comparison.", "False", "True", "Need additional information to determine this", "FALSE", "FALSE",   "C", "False negative rate is larger", "$151,424", "$501,876", "There is evidence that the red version of the website will generate more clicks on the “Store” link if there are 50 users visiting the website.", "professory in the photos from the sciences are primarily white and male in lab coats, which is not representative of science professory today.", "Student’s class year", "One of the columns will be exercise type; a categorical variable with levels such as Pilates, Weights, Walk, etc." , "Use if-else statements" , "2", "0")
)

tbl <- mc2 |>
  left_join(
    key,
    by = "question"
  ) |>
  mutate(
    correct_answer = case_when(
      answer == correct ~ 1,
      TRUE ~ 0
    ),
    mc_question_num = rep(1:29, 226) #19 = MC Q | last value needs to be sample size
  ) |> 
  group_by(question, mc_question_num) %>%
  summarize(pct_correct = mean(correct_answer)) |>
  arrange(desc(pct_correct)) |>
  as.data.frame()

tbl |>
  select(question, pct_correct) |>
  arrange(desc(pct_correct)) |>
  kbl(digits = 2) |>
  kable_styling() |>
  row_spec(which(tbl$pct_correct <=.5), bold = T, color = "white", background = "tomato")
```


:::

## Time spent

Here are common student words for the question "How much time did you spend on this assessment?"

```{r}
#| echo: false

library(dplyr)
library(tidytext) # For unnest_tokens
library(stringr)  # For string manipulation (optional, often loaded with tidyverse)

get_most_common_words <- function(data, text_column, n = 10, remove_stopwords = TRUE) {
  # Enforce data to be a tibble
  data <- as_tibble(data)

  # Quosure for tidy evaluation of the text_column
  text_column_quo <- enquo(text_column)

  word_counts <- data %>%
    # Select only the text column
    select(!!text_column_quo) %>%
    # Convert to a character vector (unnest_tokens works best with simple character input)
    pull(!!text_column_quo) %>%
    # Convert to a tibble of words, one word per row
    tibble(text = .) %>%
    unnest_tokens(word, text)

  new_stop_word <- data.frame(word = "minutes", lexicon = "custom")
  new_stop_word2 <- data.frame(word = "min", lexicon = "custom")
  new_stop_word3 <- data.frame(word = "mins", lexicon = "custom")
  stop_words_updated <- rbind(stop_words, new_stop_word, new_stop_word2, new_stop_word3)
  # Optionally remove common English stop words
  if (remove_stopwords) {
    word_counts <- word_counts %>%
      anti_join(stop_words_updated, by = "word")
  }

  # Count word frequencies
  most_common_words <- word_counts %>%
    count(word, sort = TRUE) %>%
    head(n)

  return(most_common_words)
}


get_most_common_words(assessment, time_spent, n = 10)

```

## Key

```{r}
#| echo: false
kbl(key)
```


## Distribution of responses 

#### plot

```{webr-r}
#| edit: false
#| output: false

assessment <- read_csv("clean_pilot.csv")

create_barplot <- function(data, x_var) {

  # Enforce data to be a tibble for consistent piping
  data <- as_tibble(data)

  # Use enquo for tidy evaluation of column names
  x_var_quo <- enquo(x_var)

  # Basic bar plot structure
  p <- ggplot(data, aes(x = !!x_var_quo)) +
    geom_bar() + # No fill aesthetic or explicit fill_var
    labs(x = as_label(x_var_quo), # Default x-label from variable name
         y = "Count",             # Default y-label
         title = NULL) +          # No title by default
    theme_minimal()     + 
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))# Apply a clean theme

  return(p)
}

create_frequency_table <- function(data, variable) {

  # Enforce data to be a tibble
  data <- as_tibble(data)

  # Use enquo for tidy evaluation of the variable column
  variable_quo <- enquo(variable)

  # Calculate counts (defaulting to no sorting and no percentage calculation)
  freq_table <- data %>%
    count(!!variable_quo, name = "Count")

  return(freq_table)
}

```

```{webr-r}
create_barplot(assessment, storm_paths)
```

#### table 

```{webr-r}
create_frequency_table(assessment, storm_paths)
```

